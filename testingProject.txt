 $(document).ready(function () {
     let barChart = null;

     function updateBarChart(departments) {
         const selectedDivision = $("#DivisionDropdown").val();

         if (selectedDivision && departments.length > 0) {
             $.ajax({
                 url: '@Url.Action("GetDepartmentCounts", "Innovation")',
                 type: 'GET',
                 data: { division: selectedDivision, departments: departments },
                 traditional: true,
                 success: function (data) {
                     console.log("Chart Data:", data);

                     const labels = data.map(item => item.department);
                     const counts = data.map(item => item.count);
                     const colors = labels.map(() => getRandomColor());

                     if (barChart) {
                         barChart.destroy();
                     }

                     const ctx = document.getElementById("barChart6").getContext("2d");

                     barChart = new Chart(ctx, {
                         type: "bar",
                         data: {
                             labels: labels,
                             datasets: [
                                 {
                                     label: "Department Count",
                                     data: counts,
                                     backgroundColor: colors,
                                     borderColor: colors,
                                     borderWidth: 1
                                 }
                             ]
                         },
                         options: {
                             responsive: true,
                             plugins: {
                                 datalabels: {
                                     anchor: 'end',
                                     align: 'top',
                                     color: '#000',
                                     font: {
                                         weight: 'bold',
                                         size: 10,
                                         color:'black'
                                     },
                                     formatter: value => value
                                 },
                                 legend: {
                                     display: false,
                                     position: 'top',
                                 }
                             },
                             scales: {
                                 y: {
                                     beginAtZero: true,
                                     display: true,
                                     grid: {
                                         display: false
                                     },
                                     title: {
                                         display: true,
                                         text: 'No. Of Projects',
                                         font: {
                                             size: 11,
                                             family: 'Arial',
                                             weight: 'bold',
                                             color: '#767676'
                                         }
                                     },
                                     ticks: {
                                         display:false,
                                         color: '#000',
                                         font: {
                                             size: 12,
                                             weight: 'bold'
                                         }
                                     }
                                 },
                                 x: {
                                     grid: {
                                         display: false
                                     },
                                     ticks: {
                                         callback: function (value, index, ticks) {
                                             const label = this.getLabelForValue(value);
                                             return label.split(' ');
                                         },
                                         autoSkip: false,
                                         maxRotation: 0,
                                         minRotation: 0,
                                         font: {
                                             size: 11,
                                             color:'black'

                                         },
                                         padding: 5
                                     }

                                 }
                             },
                             layout: {
                                 padding: {
                                     bottom: 20,
                                     top: 50
                                 }
                             },
                             barPercentage: 0.2,
                         },
                         
                         plugins: [ChartDataLabels]
                     });
                 },
                 error: function () {
                     alert("An error occurred while fetching chart data. Please try again.");
                 }
             });
         } else if (barChart) {
             barChart.destroy(); // Clear the chart if no data
         }
     }

     function getRandomColor() {
         const letters = "0123456789ABCDEF";
         let color = "#";
         for (let i = 0; i < 6; i++) {
             color += letters[Math.floor(Math.random() * 16)];
         }
         return color;
     }

     $("#DivisionDropdown").change(function () {
         const selectedDivision = $(this).val();
         $("#DepartmentDropdownButton").val(""); 
         $("#DepartmentList").empty(); 

         if (selectedDivision) {
             $.ajax({
                 url: '@Url.Action("GetDepartments", "Innovation")',
                 type: 'GET',
                 data: { division: selectedDivision },
                 success: function (departments) {
                     console.log("Departments received:", departments);

                     if (departments && departments.length > 0) {
                         const selectAllItem = `<li>
                             <label class="dropdown-item">
                                 <input type="checkbox" id="selectAll" class="department-checkbox" />
                                 Select All
                             </label>
                         </li>`;
                         $("#DepartmentList").append(selectAllItem);

                         departments.forEach(function (department) {
                             const listItem = `<li>
                                 <label class="dropdown-item">
                                     <input type="checkbox" name="Department" value="${department.department}" class="department-checkbox" />
                                     ${department.department}
                                 </label>
                             </li>`;
                             $("#DepartmentList").append(listItem);
                         });

                         $(".department-checkbox").change(function () {
                             if (this.id === "selectAll") {
                                 const isChecked = $(this).is(":checked");
                                 $(".department-checkbox").not("#selectAll").prop("checked", isChecked);

                                 const allDepartments = isChecked
                                     ? $(".department-checkbox")
                                         .not("#selectAll")
                                         .map(function () {
                                             return $(this).val();
                                         })
                                         .get()
                                     : [];
                                 updateSelectedCount(allDepartments);
                                 updateBarChart(allDepartments);
                             } else {
                                 const selectedDepartments = $(".department-checkbox:checked")
                                     .not("#selectAll")
                                     .map(function () {
                                         return $(this).val();
                                     })
                                     .get();

                                 $("#selectAll").prop("checked", selectedDepartments.length === $(".department-checkbox").not("#selectAll").length);

                                 updateSelectedCount(selectedDepartments);
                                 updateBarChart(selectedDepartments);
                             }
                         });
                     } else {
                         $("#DepartmentList").append('<li class="dropdown-item disabled">No departments available</li>');
                     }
                 },
                 error: function () {
                     alert("An error occurred while fetching departments. Please try again.");
                 }
             });
         } else {
             $("#DepartmentList").append('<li class="dropdown-item disabled">---- Select Department ----</li>');
         }

         // Clear the bar chart when switching divisions
         if (barChart) {
             barChart.destroy();
             barChart = null;
         }
     });

     function updateSelectedCount(selectedDepartments) {
         const selectedCount = selectedDepartments.length;
         $("#DepartmentDropdownButton").val(selectedCount > 0 ? `${selectedCount} selected` : "");
     }
 });


 <div class="row">
     <div class="col-sm-12">
         <fieldset style="border:1px solid #bfbebe;padding:5px 20px 5px 20px;margin-top:3px;margin-left:2px;">
             <h6 class="text-center">Department wise participation(Nos) - FY
             <select name="FinYear5" id="FinYear5" onchange="this.form.submit();">
                 @if (ViewBag.FinYear5 == "24-25")
                 {
                     <option value="24-25" selected>25</option>
                 }
                 else
                 {
                     <option value="24-25">25</option>
                 }
                 @if (ViewBag.FinYear5 == "25-26")
                 {
                     <option value="25-26" selected>26</option>
                 }
                 else
                 {
                     <option value="25-26">26</option>
                 }
             </select>
             </h6>
             <div class="mt-4">
                 <div class="row">
                     <div class="col-sm-1">
                         <label class="control-label">Divisions:</label>
                     </div>
                     <div class="col-sm-5">
                         <select id="DivisionDropdown" class="form-control form-control-sm custom-select">
                             <option value="" selected></option>
                             @foreach (var division in ViewBag.Divisions)
                             {
                                 <option value="@division.Division">@division.Division</option>
                             }
                         </select>
                     </div>
                     <div class="col-sm-1">
                         <label class="control-label">Department:</label>
                     </div>
                     <div class="col-sm-5">
                         <div class="dropdown">
                             <input class="dropdown-toggle col-sm-12 form-control form-control-sm custom-select text-start" type="button" id="DepartmentDropdownButton" data-bs-toggle="dropdown" aria-expanded="false" />

                             <ul class="dropdown-menu" id="DepartmentList" aria-labelledby="DepartmentDropdownButton" style="overflow-y: scroll;">
                             </ul>
                         </div>

                     </div>
                 </div>
                 <br />
                 <br />

                 <canvas id="barChart6"></canvas>
             </div>


         </fieldset>
     </div>
 </div>

 [HttpGet]
 public IActionResult GetDepartmentCounts(string division, [FromQuery] List<string> departments,string FinYear5="24-25")
 {
     string connectionString = "Server=10.0.168.50;Database=INNOVATIONDB;User Id=fs;Password=p@ssW0Rd321";
     string query = @"
 SELECT DISTINCT 
     DIV.Division,
     INN.Department,
     COUNT(INN.Department) AS Count
 FROM App_Innovation INN
 INNER JOIN TSUSMSDB.dbo.App_DepartmentMaster DEPT 
     ON DEPT.Department COLLATE DATABASE_DEFAULT = INN.Department
 INNER JOIN TSUSMSDB.dbo.App_DivisionMaster DIV 
     ON DIV.ID = DEPT.DivisionID
 WHERE DIV.Division = @Division
 AND INN.Department IN @Departments
 AND INN.Status = 'Approved'
 GROUP BY DIV.Division, INN.Department";

     using (var connection = new SqlConnection(connectionString))
     {
         var parameters = new
         {
             Division = division,
             Departments = departments
         };

         var result = connection.Query<Departmentdd>(query, parameters).ToList();
         return Json(result);
     }
   
 }