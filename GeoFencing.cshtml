
@{
    ViewData["Title"] = "GeoFencing";
}

<style>
 /* #video{
        overflow: hidden;
        box-sizing: border-box;
        height: 150px;
        width: 150px;
        border: 1px solid black;
        border-radius: 50%;
 } */

    video {
        transform: scaleX(-1);
        -webkit-transform: scaleX(-1); /* For Safari */
        -moz-transform: scaleX(-1); /* For Firefox */
    }

</style>
<div class="text-center">
    <button onclick="redirectToIframePage()" class="btn btn-warning mt-2">Check your Attendance</button>
</div>

<form asp-action="AttendanceData" id="form" asp-controller="Geo" method="post">
    <div class="form-group text-center">
        <video id="video" width="320" height="240" autoplay playsinline></video>
        <canvas id="canvas" style="display: none;"></canvas>
    </div>
    <input type="hidden" name="Type" id="EntryType" />

    <div class="row mt-5 form-group">
        <div class="col d-flex justify-content-center">
            <button type="button" class="Btn" id="PunchIn" onclick="captureImageAndSubmit('Punch In')">
                Punch In
            </button>
        </div>

        <div class="col d-flex justify-content-center">
            <button type="button" class="Btn2" id="PunchOut" onclick="captureImageAndSubmit('Punch Out')">
                Punch Out
            </button>
        </div>
    </div>
</form>


 <script>
    const video = document.getElementById("video");
    const canvas = document.getElementById("canvas");
    const EntryTypeInput = document.getElementById("EntryType");

    navigator.mediaDevices.getUserMedia({ video: { facingMode: "user" } })
        .then(function (stream) {
            video.srcObject = stream;
            video.play();
        })
        .catch(function (error) {
            console.error("Error accessing camera: ", error);
        });

    function captureImageAndSubmit(entryType) {
        EntryTypeInput.value = entryType;

        const context = canvas.getContext("2d");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        const imageData = canvas.toDataURL("image/jpeg"); // Save as JPG

       

        fetch("/Geo/AttendanceData", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                Type: entryType,
                ImageData: imageData
            })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
        })
        .catch(error => {
            console.error("Error:", error);
            alert("An error occurred while submitting the image.");
        });
    }
</script>




<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $('#form').on('submit', function (e) {
            e.preventDefault();
            var form = $(this);
            var formData = form.serialize(); // Serialize form data

            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: formData,
                success: function (response) {
                    if (response.success) {
                        var now = new Date();
                        var formattedDateTime = now.toLocaleString();

                        Swal.fire({
                            title: "Success!",
                            text:  "\nDate & Time: " + formattedDateTime,
                            icon: "success",
                            width: 600,
                            padding: "3em",
                            color: "#716add",
                            backdrop: `rgba(0,0,123,0.4) left top no-repeat`
                        }).then(() => {
                            window.location.href = "/GeoFencing/Geo/GeoFencing"; // Redirect after success
                        });
                    } else {
                        Swal.fire({
                            title: "Error!",
                            text: response.message,
                            icon: "error"
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "An error occurred while saving data.",
                        icon: "error"
                    });
                }
            });
        });
    });

    function setEntryType(type) {
        document.getElementById("EntryType").value = type;
    }
</script>

<script>
    function redirectToIframePage() {
        //window.location.href = "/Geo/AttendanceReport";
       window.location.href = "/GeoFencing/Geo/AttendanceReport";
    }

</script>
<script>
    function OnOff() {
        var punchIn = document.getElementById('PunchIn');
        var punchOut = document.getElementById('PunchOut');

        punchIn.disabled = true;
        punchOut.disabled = true;
        punchIn.classList.add("disabled");
        punchOut.classList.add("disabled");

        Swal.fire({
            title: 'Please wait...',
            text: 'Fetching your current location.',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function (position) {
                    Swal.close();

                    // Get user's current location
                    // const lat = roundTo(position.coords.latitude, 6);
                    // const lon = roundTo(position.coords.longitude, 6);
                    // console.log("Current Lat:"+lat);
                    // console.log("Current Lon:" + lon);
                    const lat = 22.79675;
                    const lon = 86.183915;

                    const locations = @Html.Raw(Json.Serialize(ViewBag.PolyData));
                    console.log(locations);

                    let isInsideRadius = false;
                    let minDistance = Number.MAX_VALUE; // Store minimum distance

                    locations.forEach((location) => {
                        const allowedRange = parseFloat(location.range || location.Range);
                        const distance = calculateDistance(lat, lon, location.latitude || location.Latitude, location.longitude || location.Longitude);
                        console.log(`Distance to location (${location.latitude}, ${location.longitude}): ${Math.round(distance)} meters`);

                        if (distance <= allowedRange) {
                            isInsideRadius = true;
                        } else {
                            minDistance = Math.min(minDistance, distance);
                        }
                    });

                    if (isInsideRadius) {
                        punchIn.disabled = false;
                        punchOut.disabled = false;
                        punchIn.classList.remove("disabled");
                        punchOut.classList.remove("disabled");
                        Swal.fire({
                            title: 'Within Range',
                            text: 'You are within the allowed range for attendance.',
                            icon: 'success'
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Out of Range",
                            text: `You are ${Math.round(minDistance)} meters away from the allowed location!`
                        });
                    }
                },
                function (error) {
                    Swal.close();
                    alert('Error fetching location: ' + error.message);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        } else {
            Swal.close();
            alert("Geolocation is not supported by this browser");
        }
    }

    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371000;
        const toRad = angle => (angle * Math.PI) / 180;
        let dLat = toRad(lat2 - lat1);
        let dLon = toRad(lon2 - lon1);
        let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    function roundTo(num, places) {
        return +(Math.round(num + "e" + places) + "e-" + places);
    }

    window.onload = OnOff;
</script>